// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  category_id  Int           @id @default(autoincrement())
  CategoryName String        @db.VarChar(255)
  user_id      Int?
  CreatedDate  DateTime?     @default(now()) @db.Timestamptz(6)
  ModifiedDate DateTime?     @default(now()) @db.Timestamptz(6)
  User         User?         @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
  JobCategory  JobCategory[]
}

model Job {
  job_id          Int           @id @default(autoincrement())
  CompanyName     String        @db.VarChar(255)
  Image           String?       @db.VarChar(255)
  JobsType        String        @db.VarChar(255)          
  CareerLevel     String        @db.VarChar(255)
  EmploymentType  String        @db.VarChar(255)
  Salary          String        @db.VarChar(255)
  JobsDescreption String?
  JobsRequirement String?
  DeadLine        DateTime      @db.Date
  Apply           String        
  CreatedDate     DateTime?     @default(now()) @db.Timestamptz(6)
  ModifiedDate    DateTime?     @default(now()) @db.Timestamptz(6)
  user_id         Int
  location_id     Int
  User            User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  Location        Location      @relation(fields: [location_id], references: [location_id], onDelete: Cascade, onUpdate: Cascade)
  JobCategory     JobCategory[]
}

model Location {
  location_id     Int           @id @default(autoincrement())
  LocationName    String        @db.VarChar(255)
  Image           String?       @db.VarChar(255)
  user_id         Int
  CreatedDate     DateTime?     @default(now()) @db.Timestamptz(6)
  ModifiedDate    DateTime?     @default(now()) @db.Timestamptz(6)
  Job             Job[]
  User            User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
  user_id      Int           @id @default(autoincrement())
  UserName     String        @unique @db.VarChar(255)
  email        String?       @db.VarChar(255)
  Password     String        @db.VarChar(255)
  role         String?       @db.VarChar(255)
  CreatedDate  DateTime?     @default(now()) @db.Timestamptz(6)
  ModifiedDate DateTime?     @default(now()) @db.Timestamptz(6)
  Category     Category[]
  JobCategory  JobCategory[]
  Job          Job[]
  Location     Location[]
}

model JobCategory {
  job_category_id  Int       @id @default(autoincrement())
  user_id      Int?
  category_id  Int
  job_id       Int
  CreatedDate  DateTime? @default(now()) @db.Timestamptz(6)
  ModifiedDate DateTime? @default(now()) @db.Timestamptz(6)
  Category     Category  @relation(fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: Cascade)
  Job          Job       @relation(fields: [job_id], references: [job_id], onDelete: Cascade, onUpdate: Cascade)
  User         User?     @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
}

model News {
  news_id                      Int           @id @default(autoincrement()) 
  Header                       String?
  Image                        String?       @db.VarChar(255)
  ShortDescription             String?           
  Description                  String?      
  user_id                      Int
  CreatedDate                  DateTime?     @default(now()) @db.Timestamptz(6)
  ModifiedDate                 DateTime?     @default(now()) @db.Timestamptz(6)    
  User                         User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)  
  NewsCategoryRelationship     NewsCategoryRelationship[]
}

model NewsCategory {
  category_id                   Int           @id @default(autoincrement())
  CategoryName                  String        @db.VarChar(255)
  user_id                       Int?
  CreatedDate                   DateTime?     @default(now()) @db.Timestamptz(6)
  ModifiedDate                  DateTime?     @default(now()) @db.Timestamptz(6)
  User                          User?         @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
  JobCategory                   JobCategory[]
}

model NewsCategoryRelationship{
  news_category_id  Int           @id @default(autoincrement())
  user_id           Int?
  category_id       Int
  news_id           Int
  CreatedDate       DateTime?     @default(now()) @db.Timestamptz(6)
  ModifiedDate      DateTime?     @default(now()) @db.Timestamptz(6)
  NewsCategory      NewsCategory  @relation(fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: Cascade)
  News              News          @relation(fields: [news_id], references: [news_id], onDelete: Cascade, onUpdate: Cascade)
  User              User?         @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
}
